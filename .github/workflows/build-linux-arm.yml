name: CI on arm linux

on:
  workflow_dispatch:
    inputs:
      operating-system:
        required: true
        description: Compile target arch (Linux only)
        type: choice
        options:
          - aarch64
      version:
        required: true
        description: php version to compile
        default: '8.2'
        type: choice
        options:
          - '8.3'
          - '8.2'
          - '8.1'
          - '8.0'
          - '7.4'
      allextensions:
        description: build all extenstions
        default: true
        type: boolean
      build-cli:
        description: build cli binary
        default: true
        type: boolean
      build-micro:
        description: build phpmicro binary
        type: boolean
      build-fpm:
        description: build fpm binary
        type: boolean
      extensions:
        description: extensions to compile (comma separated)
        type: string
      prefer-pre-built:
        description: prefer pre-built binaries (reduce build time)
        type: boolean
        default: true
      debug:
        description: enable debug logs
        type: boolean

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build:
    name: build ${{ inputs.version }} on ${{ inputs.operating-system }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Cache composer dependencies
      - id: cache-composer-deps
        uses: actions/cache@v4
        with:
          path: vendor
          key: composer-dependencies

      # If there's no Composer cache, install dependencies
      - if: steps.cache-composer-deps.outputs.cache-hit != 'true'
        run: composer update --no-dev --classmap-authoritative

      # name: Set default extensions
      - if: inputs.extensions != ''
        run: echo "extensions=${{ inputs.extensions }}" >> $env:GITHUB_ENV
      - if: inputs.build-cli == true && env.extensions == '' && inputs.allextensions == true
        run: echo "extensions=amqp,apcu,bcmath,calendar,ctype,curl,dba,dom,event,exif,fileinfo,filter,gd,gettext,iconv,igbinary,imagick,inotify,libxml,mbregex,mbstring,memcache,mongodb,msgpack,mysqli,mysqlnd,opcache,openssl,pcntl,pdo,pdo_mysql,pdo_pgsql,pdo_sqlite,pdo_sqlsrv,pgsql,phar,posix,readline,redis,session,shmop,simplexml,soap,sockets,sodium,sqlite3,sqlsrv,sysvmsg,sysvsem,sysvshm,tokenizer,xlswriter,xml,xmlreader,xmlwriter,xsl,zip,zlib" >> $GITHUB_ENV
      - if: inputs.build-cli == true && env.extensions == '' && inputs.allextensions == false
        run: echo "extensions=apcu,bcmath,calendar,ctype,curl,dba,event,exif,fileinfo,filter,gd,iconv,imagick,mbregex,mbstring,mysqli,mysqlnd,opcache,openssl,pcntl,pdo,pdo_mysql,pdo_pgsql,pdo_sqlite,pgsql,phar,posix,readline,redis,session,simplexml,sockets,sodium,sqlite3,tokenizer,xml,xmlreader,xmlwriter,zip,zlib" >> $GITHUB_ENV

      - name: Generate hashed key for download cache
        run: |
          INPUT_HASH=$(echo "${{ runner.os }}-${{ inputs.version }}-${{ env.extensions }}" | sha256sum | awk '{print $1}')
          echo "INPUT_HASH=${INPUT_HASH}" >> $GITHUB_ENV

      # Cache downloaded source
      - id: cache-download
        uses: actions/cache@v4
        with:
          path: downloads
          key: php-${{ env.INPUT_HASH }}

      # With or without debug
      - if: inputs.debug == true
        run: echo "SPC_BUILD_DEBUG=--debug" >> $GITHUB_ENV
      - if: inputs.prefer-pre-built == true
        run: echo "SPC_PRE_BUILT=--prefer-pre-built" >> $env:GITHUB_ENV

      # With target select: cli, micro or both
      - if: ${{ inputs.build-cli == true }}
        run: echo "SPC_BUILD_CLI=--build-cli" >> $GITHUB_ENV
      - if: ${{ inputs.build-micro == true }}
        run: echo "SPC_BUILD_MICRO=--build-micro" >> $GITHUB_ENV
      - if: ${{ inputs.build-fpm == true }}
        run: echo "SPC_BUILD_FPM=--build-fpm" >> $GITHUB_ENV

      # If there's no dependencies cache, fetch sources, with or without debug
      - if: steps.cache-download.outputs.cache-hit != 'true'
        run: SPC_USE_ARCH=${{ inputs.operating-system }} ./bin/spc-alpine-docker download --with-php=${{ inputs.version }} --for-extensions=${{ env.extensions }} ${{ env.SPC_BUILD_DEBUG }} ${{ env.SPC_PRE_BUILT }}

      # Run build command
      - run: SPC_USE_ARCH=${{ inputs.operating-system }} ./bin/spc-alpine-docker build ${{ env.extensions }} ${{ env.SPC_BUILD_DEBUG }} ${{ env.SPC_BUILD_CLI }} ${{ env.SPC_BUILD_MICRO }} ${{ env.SPC_BUILD_FPM }}

      # Upload cli executable
      - if: ${{ inputs.build-cli == true }}
        uses: actions/upload-artifact@v4
        with:
          name: php-${{ inputs.version }}-linux-${{ inputs.operating-system }}
          path: buildroot/bin/php

      # Pack PHP to archive 
      - if:  inputs.build-cli == true && inputs.allextensions == true
        run: mkdir dist2 && cp buildroot/bin/php dist2/ && cd dist2 && tar -zcvf "php-${{ inputs.version }}-linux-${{ inputs.operating-system }}-all-extension.tar.gz" ./php && rm ./php
      - if:  inputs.build-cli == true && inputs.allextensions == false
        run: mkdir dist2 && cp buildroot/bin/php dist2/ && cd dist2 && tar -zcvf "php-${{ inputs.version }}-linux-${{ inputs.operating-system }}.tar.gz" ./php && rm ./php
        
      # Deploy to Zhamao Server
      - if: ${{ inputs.build-cli == true }}
        uses: easingthemes/ssh-deploy@v5.1.0
        env:
          SSH_PRIVATE_KEY: ${{ secrets.DEPLOY_SERVER_SECRET_KEY }}
          ARGS: "-rltgoDzvO"
          SOURCE: "dist2/"
          REMOTE_HOST: ${{ secrets.DEPLOY_SERVER_HOST }}
          REMOTE_PORT: ${{ secrets.DEPLOY_SERVER_PORT }}
          REMOTE_USER: ${{ secrets.DEPLOY_SERVER_USER }}
          TARGET: ${{ secrets.DEPLOY_SERVER_TARGET }}

      # Upload micro self-extracted executable
      - if: ${{ inputs.build-micro == true }}
        uses: actions/upload-artifact@v4
        with:
          name: micro-${{ inputs.version }}-linux-${{ inputs.operating-system }}
          path: buildroot/bin/micro.sfx

      # Upload fpm executable
      - if: ${{ inputs.build-fpm == true }}
        uses: actions/upload-artifact@v4
        with:
          name: php-fpm-${{ inputs.version }}-linux-${{ inputs.operating-system }}
          path: buildroot/bin/php-fpm

      # Upload extensions metadata
      - uses: actions/upload-artifact@v4
        with:
          name: license-files
          path: buildroot/license/
      - uses: actions/upload-artifact@v4
        with:
          name: build-meta
          path: |
            buildroot/build-extensions.json
            buildroot/build-libraries.json
